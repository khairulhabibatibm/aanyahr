(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common/http'),require('ngx-highlightjs'),exports, require('@angular/core'), require('@angular/common/http'), require('ngx-highlightjs'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-highlightjs/plus', ['@angular/core','@angular/common/http','ngx-highlightjs','exports', '@angular/core', '@angular/common/http', 'ngx-highlightjs', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common.http,global.ngxHighlightjs,(global['ngx-highlightjs'] = global['ngx-highlightjs'] || {}, global['ngx-highlightjs'].plus = {}), global.ng.core, global.ng.common.http, global['ngx-highlightjs'], global.rxjs, global.rxjs.operators));
}(this, (function (ɵngcc0,ɵngcc1,ɵngcc2,exports, i0, i1, ngxHighlightjs, rxjs, operators) { 'use strict';

    var GIST_OPTIONS = new i0.InjectionToken('GIST_OPTIONS');

    var CodeLoader = /** @class */ (function () {
        function CodeLoader(_http, _options) {
            this._http = _http;
            this._options = _options;
        }
        /**
         * Get plus code
         * @param id Gist ID
         */
        CodeLoader.prototype.getCodeFromGist = function (id) {
            var params;
            if (this.isOAuthProvided()) {
                params = new i1.HttpParams().set('client_id', this._options.clientId).set('client_secret', this._options.clientSecret);
            }
            return this.fetchFile("https://api.github.com/gists/" + id, { params: params, responseType: 'json' });
        };
        /**
         * Get code by URL
         * @param url File raw link
         */
        CodeLoader.prototype.getCodeFromUrl = function (url) {
            return this.fetchFile(url, { responseType: 'text' });
        };
        /**
         * Check if OAuth option is provided
         */
        CodeLoader.prototype.isOAuthProvided = function () {
            return !!this._options && !!this._options.clientId && !!this._options.clientSecret;
        };
        CodeLoader.prototype.fetchFile = function (url, options) {
            // Check if URL is valid
            if (isUrl(url)) {
                return this._http.get(url, options).pipe(
                // Catch response
                operators.publishReplay(1), operators.refCount(), operators.catchError(function (err) {
                    console.error('[NgxHighlight]: Unable to fetch the URL!', err.message);
                    return rxjs.EMPTY;
                }));
            }
            return rxjs.EMPTY;
        };
CodeLoader.ɵfac = function CodeLoader_Factory(t) { return new (t || CodeLoader)(ɵngcc0.ɵɵinject(ɵngcc1.HttpClient), ɵngcc0.ɵɵinject(GIST_OPTIONS, 8)); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeLoader, [{
        type: i0.Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: ɵngcc1.HttpClient }, { type: undefined, decorators: [{
                type: i0.Optional
            }, {
                type: i0.Inject,
                args: [GIST_OPTIONS]
            }] }]; }, null); })();
        return CodeLoader;
    }());
    CodeLoader.ɵprov = i0.ɵɵdefineInjectable({ factory: function CodeLoader_Factory() { return new CodeLoader(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(GIST_OPTIONS, 8)); }, token: CodeLoader, providedIn: "root" });
    CodeLoader.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [GIST_OPTIONS,] }] }
    ]; };
    function isUrl(url) {
        var regExp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
        return regExp.test(url);
    }

    var GistDirective = /** @class */ (function () {
        function GistDirective(_loader) {
            this._loader = _loader;
            this.gistLoad = new i0.EventEmitter();
        }
        Object.defineProperty(GistDirective.prototype, "gist", {
            set: function (value) {
                var _this = this;
                if (value) {
                    this._loader.getCodeFromGist(value).subscribe(function (gist) { return _this.gistLoad.emit(gist); });
                }
            },
            enumerable: false,
            configurable: true
        });
GistDirective.ɵfac = function GistDirective_Factory(t) { return new (t || GistDirective)(ɵngcc0.ɵɵdirectiveInject(CodeLoader)); };
GistDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GistDirective, selectors: [["", "gist", ""]], inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistDirective, [{
        type: i0.Directive,
        args: [{
                selector: '[gist]'
            }]
    }], function () { return [{ type: CodeLoader }]; }, { gistLoad: [{
            type: i0.Output
        }], gist: [{
            type: i0.Input
        }] }); })();
        return GistDirective;
    }());
    GistDirective.ctorParameters = function () { return [
        { type: CodeLoader }
    ]; };
    GistDirective.propDecorators = {
        gist: [{ type: i0.Input }],
        gistLoad: [{ type: i0.Output }]
    };
    var GistFilePipe = /** @class */ (function () {
        function GistFilePipe() {
        }
        GistFilePipe.prototype.transform = function (gist, fileName) {
            return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
        };
GistFilePipe.ɵfac = function GistFilePipe_Factory(t) { return new (t || GistFilePipe)(); };
GistFilePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gistFile", type: GistFilePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistFilePipe, [{
        type: i0.Pipe,
        args: [{
                name: 'gistFile'
            }]
    }], function () { return []; }, null); })();
        return GistFilePipe;
    }());

    var CodeFromUrlPipe = /** @class */ (function () {
        function CodeFromUrlPipe(_loader) {
            this._loader = _loader;
        }
        CodeFromUrlPipe.prototype.transform = function (url) {
            return this._loader.getCodeFromUrl(url);
        };
CodeFromUrlPipe.ɵfac = function CodeFromUrlPipe_Factory(t) { return new (t || CodeFromUrlPipe)(ɵngcc0.ɵɵdirectiveInject(CodeLoader)); };
CodeFromUrlPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "codeFromUrl", type: CodeFromUrlPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CodeFromUrlPipe, [{
        type: i0.Pipe,
        args: [{
                name: 'codeFromUrl'
            }]
    }], function () { return [{ type: CodeLoader }]; }, null); })();
        return CodeFromUrlPipe;
    }());
    CodeFromUrlPipe.ctorParameters = function () { return [
        { type: CodeLoader }
    ]; };

    var HighlightPlusModule = /** @class */ (function () {
        function HighlightPlusModule() {
        }
HighlightPlusModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HighlightPlusModule });
HighlightPlusModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function HighlightPlusModule_Factory(t) { return new (t || HighlightPlusModule)(); }, imports: [[
            ngxHighlightjs.HighlightModule,
            i1.HttpClientModule
        ], ɵngcc2.HighlightModule] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HighlightPlusModule, { declarations: [GistDirective, GistFilePipe, CodeFromUrlPipe], imports: [ɵngcc2.HighlightModule, ɵngcc1.HttpClientModule], exports: [ɵngcc2.HighlightModule, GistDirective, GistFilePipe, CodeFromUrlPipe] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(HighlightPlusModule, [{
        type: i0.NgModule,
        args: [{
                imports: [
                    ngxHighlightjs.HighlightModule,
                    i1.HttpClientModule
                ],
                declarations: [
                    GistDirective,
                    GistFilePipe,
                    CodeFromUrlPipe
                ],
                exports: [
                    ngxHighlightjs.HighlightModule,
                    GistDirective,
                    GistFilePipe,
                    CodeFromUrlPipe
                ]
            }]
    }], function () { return []; }, null); })();
        return HighlightPlusModule;
    }());

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CodeFromUrlPipe = CodeFromUrlPipe;
    exports.CodeLoader = CodeLoader;
    exports.GIST_OPTIONS = GIST_OPTIONS;
    exports.GistDirective = GistDirective;
    exports.GistFilePipe = GistFilePipe;
    exports.HighlightPlusModule = HighlightPlusModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-highlightjs-plus.umd.js.map