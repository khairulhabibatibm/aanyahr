import { Directive, Pipe, Input, Output, EventEmitter } from '@angular/core';
import { CodeLoader } from './code-loader';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './code-loader';
export class GistDirective {
    constructor(_loader) {
        this._loader = _loader;
        this.gistLoad = new EventEmitter();
    }
    set gist(value) {
        if (value) {
            this._loader.getCodeFromGist(value).subscribe((gist) => this.gistLoad.emit(gist));
        }
    }
}
GistDirective.ɵfac = function GistDirective_Factory(t) { return new (t || GistDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.CodeLoader)); };
GistDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GistDirective, selectors: [["", "gist", ""]], inputs: { gist: "gist" }, outputs: { gistLoad: "gistLoad" } });
GistDirective.ctorParameters = () => [
    { type: CodeLoader }
];
GistDirective.propDecorators = {
    gist: [{ type: Input }],
    gistLoad: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistDirective, [{
        type: Directive,
        args: [{
                selector: '[gist]'
            }]
    }], function () { return [{ type: ɵngcc1.CodeLoader }]; }, { gistLoad: [{
            type: Output
        }], gist: [{
            type: Input
        }] }); })();
export class GistFilePipe {
    transform(gist, fileName) {
        return (gist && gist.files && gist.files[fileName]) ? gist.files[fileName].content : null;
    }
}
GistFilePipe.ɵfac = function GistFilePipe_Factory(t) { return new (t || GistFilePipe)(); };
GistFilePipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "gistFile", type: GistFilePipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GistFilePipe, [{
        type: Pipe,
        args: [{
                name: 'gistFile'
            }]
    }], null, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2lzdC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWhpZ2hsaWdodGpzL3BsdXMvc3JjL2dpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBaUIsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQU0zQyxNQUFNLE9BQU8sYUFBYTtBQUMxQixJQUNFLFlBQW9CLE9BQW1CO0FBQ3pDLFFBRHNCLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQVU5QixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQVEsQ0FBQztBQUNoRCxJQVZFLENBQUM7QUFDSCxJQUNFLElBQ1ksSUFBSSxDQUFDLEtBQWE7QUFDaEMsUUFBSSxJQUFJLEtBQUssRUFBRTtBQUNmLFlBQU0sSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzlGLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDt5Q0FkQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFFBQVEsY0FDbkI7bUtBQ0k7QUFBQztBQUVTLFlBUk4sVUFBVTtBQUFHO0FBQUc7QUFDWCxtQkFVWCxLQUFLO0FBQ04sdUJBTUMsTUFBTTtBQUFJOzs7Ozs7Ozs7O29CQUFFO0FBTWYsTUFBTSxPQUFPLFlBQVk7QUFBRyxJQUMxQixTQUFTLENBQUMsSUFBVSxFQUFFLFFBQWdCO0FBQUksUUFDeEMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztBQUM5RixJQUFFLENBQUM7QUFDSDt3Q0FQQyxJQUFJLFNBQUMsa0JBQ0osSUFBSSxFQUFFLFVBQVU7U0FDakI7Ozs7OzswQkFDSTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBQaXBlLCBJbnB1dCwgT3V0cHV0LCBQaXBlVHJhbnNmb3JtLCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvZGVMb2FkZXIgfSBmcm9tICcuL2NvZGUtbG9hZGVyJztcbmltcG9ydCB7IEdpc3QgfSBmcm9tICcuL2dpc3QubW9kZWwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbZ2lzdF0nXG59KVxuZXhwb3J0IGNsYXNzIEdpc3REaXJlY3RpdmUge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgX2xvYWRlcjogQ29kZUxvYWRlcikge1xuICB9XG5cbiAgQElucHV0KClcbiAgcHJpdmF0ZSBzZXQgZ2lzdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9sb2FkZXIuZ2V0Q29kZUZyb21HaXN0KHZhbHVlKS5zdWJzY3JpYmUoKGdpc3Q6IEdpc3QpID0+IHRoaXMuZ2lzdExvYWQuZW1pdChnaXN0KSk7XG4gICAgfVxuICB9XG5cbiAgQE91dHB1dCgpIGdpc3RMb2FkID0gbmV3IEV2ZW50RW1pdHRlcjxHaXN0PigpO1xufVxuXG5AUGlwZSh7XG4gIG5hbWU6ICdnaXN0RmlsZSdcbn0pXG5leHBvcnQgY2xhc3MgR2lzdEZpbGVQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gIHRyYW5zZm9ybShnaXN0OiBHaXN0LCBmaWxlTmFtZTogc3RyaW5nKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIChnaXN0ICYmIGdpc3QuZmlsZXMgJiYgZ2lzdC5maWxlc1tmaWxlTmFtZV0pID8gZ2lzdC5maWxlc1tmaWxlTmFtZV0uY29udGVudCA6IG51bGw7XG4gIH1cbn1cbiJdfQ==