import { __decorate, __metadata, __param } from "tslib";
import { Directive, EventEmitter, HostListener, Input, Optional, Output } from '@angular/core';
import { isStepId } from '../util/step-id.interface';
import { isStepIndex } from '../util/step-index.interface';
import { isStepOffset } from '../util/step-offset.interface';
import { WizardStep } from '../util/wizard-step.interface';
import { WizardComponent } from '../components/wizard.component';
/**
 * The `awGoToStep` directive can be used to navigate to a given step.
 * This step can be defined in one of multiple formats
 *
 * ### Syntax
 *
 * With absolute step index:
 *
 * ```html
 * <button [awGoToStep]="{ stepIndex: absolute step index }" (finalize)="finalize method">...</button>
 * ```
 *
 * With unique step id:
 *
 * ```html
 * <button [awGoToStep]="{ stepId: 'step id of destination step' }" (finalize)="finalize method">...</button>
 * ```
 *
 * With a wizard step object:
 *
 * ```html
 * <button [awGoToStep]="wizard step object" (finalize)="finalize method">...</button>
 * ```
 *
 * With an offset to the defining step:
 *
 * ```html
 * <button [awGoToStep]="{ stepOffset: offset }" (finalize)="finalize method">...</button>
 * ```
 *
 * @author Marc Arndt
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../components/wizard.component';
import * as ɵngcc2 from '../util/wizard-step.interface';
let GoToStepDirective = class GoToStepDirective {
    /**
     * Constructor
     *
     * @param wizard The wizard component
     * @param wizardStep The wizard step, which contains this [[GoToStepDirective]]
     */
    constructor(wizard, wizardStep) {
        this.wizard = wizard;
        this.wizardStep = wizardStep;
        /**
         * This [[EventEmitter]] is called directly before the current step is exited during a transition through a component with this directive.
         */
        this.preFinalize = new EventEmitter();
        /**
         * This [[EventEmitter]] is called directly after the current step is exited during a transition through a component with this directive.
         */
        this.postFinalize = new EventEmitter();
    }
    /**
     * A convenience field for `preFinalize`
     */
    get finalize() {
        return this.preFinalize;
    }
    /**
     * A convenience name for `preFinalize`
     *
     * @param emitter The [[EventEmitter]] to be set
     */
    set finalize(emitter) {
        /* istanbul ignore next */
        this.preFinalize = emitter;
    }
    /**
     * Returns the destination step of this directive as an absolute step index inside the wizard
     *
     * @returns The index of the destination step
     * @throws If `targetStep` is of an unknown type an `Error` is thrown
     */
    get destinationStep() {
        let destinationStep;
        if (isStepIndex(this.targetStep)) {
            destinationStep = this.targetStep.stepIndex;
        }
        else if (isStepId(this.targetStep)) {
            destinationStep = this.wizard.getIndexOfStepWithId(this.targetStep.stepId);
        }
        else if (isStepOffset(this.targetStep) && this.wizardStep !== null) {
            destinationStep = this.wizard.getIndexOfStep(this.wizardStep) + this.targetStep.stepOffset;
        }
        else if (this.targetStep instanceof WizardStep) {
            destinationStep = this.wizard.getIndexOfStep(this.targetStep);
        }
        else {
            throw new Error(`Input 'targetStep' is neither a WizardStep, StepOffset, StepIndex or StepId`);
        }
        return destinationStep;
    }
    /**
     * Listener method for `click` events on the component with this directive.
     * After this method is called the wizard will try to transition to the `destinationStep`
     */
    onClick() {
        this.wizard.goToStep(this.destinationStep, this.preFinalize, this.postFinalize);
    }
};
GoToStepDirective.ɵfac = function GoToStepDirective_Factory(t) { return new (t || GoToStepDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WizardComponent), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.WizardStep, 8)); };
GoToStepDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: GoToStepDirective, selectors: [["", "awGoToStep", ""]], hostBindings: function GoToStepDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function GoToStepDirective_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { targetStep: ["awGoToStep", "targetStep"] }, outputs: { preFinalize: "preFinalize", postFinalize: "postFinalize", finalize: "finalize" } });
GoToStepDirective.ctorParameters = () => [
    { type: WizardComponent },
    { type: WizardStep, decorators: [{ type: Optional }] }
];
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoToStepDirective.prototype, "preFinalize", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], GoToStepDirective.prototype, "postFinalize", void 0);
__decorate([
    Input('awGoToStep'),
    __metadata("design:type", Object)
], GoToStepDirective.prototype, "targetStep", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter),
    __metadata("design:paramtypes", [EventEmitter])
], GoToStepDirective.prototype, "finalize", null);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], GoToStepDirective.prototype, "onClick", null);
GoToStepDirective = __decorate([ __param(1, Optional()),
    __metadata("design:paramtypes", [WizardComponent, WizardStep])
], GoToStepDirective);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(GoToStepDirective, [{
        type: Directive,
        args: [{
                selector: '[awGoToStep]'
            }]
    }], function () { return [{ type: ɵngcc1.WizardComponent }, { type: ɵngcc2.WizardStep, decorators: [{
                type: Optional
            }] }]; }, { preFinalize: [{
            type: Output
        }], postFinalize: [{
            type: Output
        }], finalize: [{
            type: Output
        }], 
    /**
     * Listener method for `click` events on the component with this directive.
     * After this method is called the wizard will try to transition to the `destinationStep`
     */
    onClick: [{
            type: HostListener,
            args: ['click']
        }], targetStep: [{
            type: Input,
            args: ['awGoToStep']
        }] }); })();
export { GoToStepDirective };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,